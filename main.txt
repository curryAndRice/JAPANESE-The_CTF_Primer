The CTF Primer 日本語版プロジェクト

=======================================================================================


CTF入門書

1.はじめに
CTF(capture the flag)とは、「旗取りゲーム」という意味の英語表現で、 要するにハッキング大会です。解けなかった問題を解けるようにする過程で、参加者のITスキルを向上させる目的で行わます。
あなたはここで本当に楽しい思いをするでしょう。そして、あなたはコンピューターを使って人生で半端ないことができるようになるでしょう。ほかの人に出来ないことが出来るようになるなんて、超能力を手に入れるようなものです。その可能性を見てみましょう。
普通の携帯（今あなたが手に持っているような）には、人類を初めて月に送るのに使われたコンピューターの10万倍の計算能力がある。地球には77億人が住んでいるが、2020年には300億台もの機器がインターネットに繋がれると知っていたか？その「全て」の力を想像してみて…。その「ほんの一部」を使うだけで、今までに考えられなかったことがたくさんできる。そして、その力は日々成長し続けているのだ…。
私たちの世界はコンピューターに依存しています。もしも、コンピューターが動かなくなったら、銀行からお金を引き下ろせなくなり、すべての情報通信が使えなくなり、さらに病院や命を守るシステムは、取り返しがつかなくなります。しまいには社会が崩壊するでしょう。1998年、悪気のない一人の男性が、モリスワームとして知られている、たった一つのマルウェアによってインターネットをすぺてダウンさせました。当時はまだインターネットにそれほど依存していなかったから、さきほどの大惨事にはなりませんでした。しかし、なぜ現代の社会は大惨事に見舞われていないのでしょうか？
大惨事を含め、弱点を克服する唯一の方法は、まず弱点の存在を知ることです。「ハッカー」はコンピューターの世界で弱点を見つけます。ハッカーという言葉には、歴史を通じていくつかの定義があります。辞書を引くと、定義が2つ見つかります:
1.プログラミングの専門家で、コンピューターを使って問題を解決する者
2.コンピューターシステム内の情報に不正アクセスし、ときには改竄する者
私たちはこの二つを足して二で割る行為をするつもりで、良いことのために情報にアクセスし、改竄するつもりです。つまり、このスキルは悪意のあることにも使えるが、テクノロジーを自在に操る、現実でのヒーローになるために使うこともできます。空想に聞こえるかもしれないけれど、フラッグ（答えである文字列）を手に入れるだけでも、感動とアドレナリンが生まれることを実感していただけるでしょう。一緒に本物のハッカーになる旅に出かけよう！

2.シェル
シェルは、コンピューターやそのネットワークの安全性を確保する上での、たくさん部分の基礎となっています。威圧的であり、魅力的でもある（映画においてもハッキングの象徴である）シェルを理解することは、picoCTFのようなCTFの課題を解決する能力を左右します。
常に疑問符が頭の上に浮かんでいるような、好奇心旺盛な人に朗報です！率直に言って、私はまだシェルについてたくさんのことを学んでいる途中で、まだ学び始めてから約10年しかたっていません。シェルのような素晴らしいツールについて学ぶ機会はいつまでも尽きません。でも安心してください、ずっと以前から私はシェルに熟練していましたし、<bold>「あなたも」</bold>シェルをマスターするのにとても長い時間は要しないでしょう。
では、ハッカーとシェルにしかない神秘性とは、いったい何なのでしょうか？

2.1.ハッカーの象徴
真っ黒な画面と真っ白に点滅するカーソル。何行も何行もスクロールするテキスト。理解不能に見える情報の流れ。それを理解しているように見える画面の前の誰か。それがシェルです。
ターミナル(the tarminal)、コマンドプロンプト(the command prompt)、バッシュ(bash)、Windowsを見て「ブルー」な気分になるならパワーシェル(PowerShell)。それぞれの名前にはニュアンスがありますが、今はそんなことはどうでもいいでしょう。今重要なことは、ほぼすべての人が使っているコンピューターなどの端末には、端末と使う人を仲立ちするインターフェイスがあることや、それがシェルであることでしょう。
もしもあなたがシェルを使ってみるためにここに来たのであって、それ以外にはあまり興味がないのであれば、シェルを使ってみる　セクションまで読み飛ばすべきです。注意！！シェルは通常の操作方法よりも強力です。シェルではファイルを削除するときにごみ箱に移動させるような生ぬるいことはせず、また、シェルでは、隠しファイルでさえいつでもアクセスできます。この二つの組み合わせは非常に危険であると言っても過言ではないでしょう、

2.2.シェルはある？
パソコンやスマートデバイスを使うには2種類の方法があります。
1.マウスやタッチパッドと指を使って、ポインターを操作し、使うアプリやファイル、ボタンを選択する。
2.キーボードを使って単純な、あるいは複雑なコマンドを打ち込む（シェル）
ありがたいことに、2つの方法にそれぞれ三文字で省略した言い方があります。
1.GUI（グーイー　と発音し、Graphical User Interface　の略。）
2.CLI（シーエルアイ　と発音し、Command Line Interface　の略。）
これらのイニシャルは、イニシャルとしてはけっこういいものです。ここではシェルをいろいろな名前で呼ぶでしょうし、時にはCLIと呼ぶこともあるでしょう。GUIはシェルほどいい名前ではない（訳し方あってる？）ので、ここでは皆さんおなじみであろう、ポインターを使ってコンピューターを操作する操作方法のことを指していると考えて下さい。
下の図はログインに成功した後、ユーザーがまだコマンドを打ち込む前のシェルです。
#!図1. コマンドを待機しているシェル
上の写真では、空白のスペースが多く、存在するテキストの行でさえ、ちょっとよく分かりません。でも、見た目よりも起こっていることは簡単です。上のスクショにはたった3つの情報しかなく、もしログインしたのがあなたならば、そのうち少なくとも1つには見覚えがあると思います。
左から右へ見てみましょう。
1.<code>Q0h313th</code>って何？
・答えはこちら：https://gist.github.com/syreal17/a000b3ac491b80bfabb6ab80491b66e5
（要約：ユーザー名を表している。）
2.<code>pico-2019-shell1</code>って何？
・答えはこちら：https://gist.github.com/syreal17/2152a545457f7f83a11006139e5a04f1
（要約：シェルが制御しているのは「pico-2019-shell1」と呼ばれるコンピューターであることを表しています。）
3.<code>~</code>って何？
・答えはこちら：https://gist.github.com/syreal17/8b4bdf7bd0b35a7196b73c02c31c0ec2
（要約：シェルが Q0h313th のホームディレクトリ（つまり、`/home/Q0h313th/`）上であることを表しています。）
4.<code>$</code>って何？
・答えはこちら：https://gist.github.com/syreal17/dc1340fef44be3dc59819e3379c3fe28
（要約：セパレーターであり、この文字より前はコンピューターが生成した文で、この文字より後はユーザーが入力したコマンドです。注意：ここで紹介するコマンド例のほとんどは、そのコマンドがシェルで実行されることを示すために、$で始まります。）
荒々しい力に関して、Q0h313thはコマンド一つで彼の所有するファイルをすべて消すことができますが、ほとんどの場合、あまり望ましい使い方ではないでしょう。そのようなコマンドを紹介するのは、何か便利で望ましい使い方が出来るようになるまではここでは控えます。便利な力に関して、Q0h313thはWiFiがなくてもウェブサイトを見られるように、コピーを作ることが出来ます。ウェブサイトのコピーを作るには、コマンド <code>wget</code>が使えます。
それでは実際にシェルを<bold>使って</bold>みましょう！

2.3.シェルを使ってみる
サイバーセキュリティーは、聞いて、<bold>そして</bold>やってみることで最も深く学べるトピックです。だから、まだpicoCTFアカウント（完全無料）をお持ちでない方は、この時点で作成されることをお勧めします。学習に役立つヒント付きの120問以上のセキュリティー課題が提供されているだけではなく、すべてのpicoCTFアカウントはウェブベースのLinuxシェルにアクセスできます。
私(LT)の章の構成についてのメモ:多くの場合、私はタスクのハイレベルなチュートリアルと、同じタスクの細かい説明を提供します。これは、異なる学習スタイル、異なる経験レベルに対応するための試みです。ハイレベルなチュートリアルは、基本は掴めているが復習が必要な学習者や、この入門書を読み返している学習者向けです。細かい説明は、初めて挑戦する学習者向けです。もちろん、ここでどちらを読むか選択しなければならないですが、最も確実な方法は、ハイレベルのチュートリアルを読みながら、細かい説明で実際に手を動かしてみることかもしれません。

2.3.1.ハイレベルなチュートリアル
1.練習シェルへのアクセスを獲得する。
 1.picoCTFでアカウントを登録
 2.eメールの中のリンクをクリックして認証する
 3.picoCTFのウェブシェルにログイン

2.3.2.細かい説明
picoCTFのアカウントを下のリンクで登録しましょう。メールの中のリンクをクリックして、メールアドレスを検証する必要があります。
https://play.picoctf.org/register/
アカウントをすでに持っている方はこちら↓
https://play.picoctf.org/login/
登録に成功したら、下のリンクからウェブシェルにアクセスできます。<bold>登録した時と、同じユーザー名とパスワードを使って下のウェブシェルにログインしてください。</bold>(または、ログインしてから右上にある"WebShell"パネルから)セキュリティーのため、パスワードを入力しても表示されないようになっています。
https://webshell.picoctf.org/

2.3.3.報告
おめでとうございます（特に、生まれて初めてコマンドプロンプトを立ち上げる場合は）！次のセクションでは、あなたが長年使ってきたであろうデバイスに関連づけて、シェルの謎を解いていきます。（デバイスを使ったことがないなら、あなたは母国語がシェルの人々に仲間入りします。おめでとうございます！）

2.4. GUI風からシェル風へ
日本語であれ英語であれほかの言語であれ、子供の母国語を覚えることには、意識的な努力をほとんど必要としなかった。しかし、第二言語を学んだことがある人ならばわかるだろう。第二言語では、まったく逆である：自然に身につくことはほとんどない。GUIのみを「話した」ことのある人々にとって、シェルを学ぶということは第二言語を学ぶようなものだ。これは良いニュースであり、悪いニュースでもある。良いニュースは。シェルとGUIはおそらく何年も使い続けている言語だということだ。しかし、悪いニュースは、同義語（両言語で同じ音や意味を持つ単語）がほんの一握りあるだけで、まるっきり新しい語彙があることだ。
GUIでおなじみのコンピューターの基本操作は、シェルでも簡単にできる。ここでは、コンピューターを使っている人なら誰でも、よく使う操作をいくつか紹介しよう。
表1.基本的なコンピューターの命令
上の表が示すように、GUIを使うにはブラウズやクリックが必要で、シェルを使うには良いアプリを知る必要があります。Googleのおかげで、数年前よりもずっと、シェルに適したアプリを見つけるのが簡単になりました。CTFでは、Googleはいつもあなたの味方です！ですが、シェルコマンドを素早く教えてくれる下のサイトのように、より直接シェルについて教えてくれる情報源はもっと有用でしょう。
https://explainshell.com/explain?cmd=date
しかし、ものごとは常に計画通りに進むとは限りません。次の章では、どうしても生じてしまうこの種の問題について扱います。

2.5.まじシェルいて！
シェルの学習過程における主な過酷さは、利用可能なアプリやコマンドを暗記するか、必要な時に調べるかして知らなけらばならないことだ。…間違いなく、できるだけ多く暗記した方が早く問題を解ける。
もう一つの課題は、意図したファイルを参照するためにタイピングをしなければならないことがあることだ。
最後に、アプリと接する際も、パラメーターや引数の名前を覚えたり調べたりする必要がある。
要約すると、シェルを使う上で最も困難な点がいくつかある:
1.コマンド(別名 アプリ/プログラム)の暗記
2.長いコマンドの入力
3.コマンドの引数の暗記

2.5.1挑戦1:コマンドの暗記
シェルコマンドが一通り揃っているチートシートを持つことは、コマンドを覚えるという挑戦を克服するために必須です。可能であれば、プリントアウトしておくとよいでしょう！（画面を節約できます。）以下のリンク先のチートシ－トはとても良い！（翻訳者より：英語だけど、翻訳してみる価値はあります。ライセンスが怖いので、再配布は控えておきます。各自ツールを用いて翻訳してみてください。）
https://www.git-tower.com/blog/command-line-cheat-sheet/

2.5.2長いコマンドの入力
私の素晴らしい優秀な生徒の多くは、学習が始まって何千picoCTFポイントを獲得するまで、シェル・コマンドプロンプトでのタイピングを高速化する方法を知りませんでした。これは私の責任であり、実際、私たちのほとんどが後になって、しなくてもよい後悔をするんです！たった一言：
<bold>TAB</bold>
シェルでは、TABキーを押すとファイル名補完が起動し、1.TABキーを押すまでのコマンドやファイルのスペルが正しく入力されていると仮定し、2.コマンドやファイル名を可能な限り補完します。
シェルのファイル名補完機能は、携帯電話など他アプリの変換予測とは大きく異なるため、シェルのファイル名補完はタブコンプリート(tab-complete)と呼ばれます。慣れるには練習が必要ですが、キーを押す回数がおそらく半分になるので、時間をかける価値はあります！
携帯電話の仮想キーボードの変換予測とは異なり、タブコンプリートは決して間違いません。これは、推測を行わないで、単純にコマンドやファイルパス、ファイル名のみを補完するからです。ファイル名以外のコマンドの引数を補完するのに役立つことはほとんどないです。タブを押しているのに何も起きないときは、1（ファイルのスペルが正しく入力されているという仮定が誤っている）が原因です。コマンドプロンプトに入力した内容を正しく補完するコマンドやファイル名がないか、2（十分に補完されない）とき。コマンドプロンプトに入力した内容が複数のコマンドやファイル名に補完できる可能性があります。もう1文字か2文字打ってみてください。その後、もう1度TABキーを押してみてください。これ以上何も補完されない場合も、もう1度TABキーを押してみてください。怒っているような音や光ったりする以外に本当に何も起こらない場合、既に入力した内容を自動補完できません。（入力ミスがあるかも？）しかし、もしもTABキーで複数通りに変換できることが問題なら、TABキーを2度押しした後に候補が表示されます。TABキーの2度押しはいつでも可能ですが、候補が何百通りもある場合は、ほとんどの場合役に立たないので、シェルはすべての候補を表示する前にあなたの承認を求めるでしょう。
次のセクションでは、シェルの世界の感覚をつかむために、基本的なシェルコマンドをいくつか紹介します。

2.5.3. シェル実演1
<code>
# ( ..)φメモメモ：
# ※「$」の記号よりも後の文字を、シェルに入力してから、
# エンターキーを押して実行してみてください。
#
# ※「#」の記号よりも後の文字はコメントです。
# シェルには入力しないでください。
#
# この短いチュートリアルは、基本的なシェルコマンドを実行し、
# 各コマンドの簡単な説明を行うことを目的としています。

# 下のコマンドでは、ホームディレクトリ
#（あなたがファイルを作り出せる場所！）にシェルを「移動」させます

$ cd

# 下のコマンドでは、あなたのシェルのがどこにあるかを表示します。

$ pwd

# 下のコマンドでは、シェルがある場所に「tutorial」という名前の
# 新しいディレクトリを作ります。
# 残念ながら、webシェル上では日本語は使えないようです。

$ mkdir tutorial

# 下のコマンドでは、シェルを「tutorial」という名前の
# あなたが作ったフォルダー内に移動させます。

$ cd tutorial

# pwd は "print working directory」（ただし、print はここではディスプレイに表示）
# の略です。"working directory"（作業ディレクトリ）とは技術用語で、
# 自分のシェルがある（作業している、置かれている）場所を指します。

$ pwd


#下のコマンドは、「note.txt」という名前の新しい空ファイルを作ります。

$ touch note.txt


#下のコマンドはあなたの作業ディレクトリの中のファイルを一覧表示します。

$ ls


# 個人的には、一列ごとに出力するのが好きです。こんなふうに

$ ls -l


# 下のコマンドは、「note.txt」の中身（今はまだ空）を表示します。

$ cat note.txt


# 下のコマンドは、「note.txt」の中身を「hello world! I'm a snail」にします。

$ echo "hello world! I'm a snail" > note.txt


# 今、cat コマンドが何か「note.txt」の中身を表示するはずです。

$ cat note.txt


# 下のコマンドは、「new-note.txt」という名前の「note.txt」のコピーを作ります。

$ cp note.txt new-note.txt


# 「new-note.txt」の中身は？

$ cat new-note.txt


# ※下のコマンドは、「new-note.txt」をターミナルのテキストエディタで
# 「new-note.txt」を開きます。
# ※ファイルを変更してみてから、Ctrl-Xで保存して終了しましょう。

$ nano new-note.txt


# うまくいったら、このコマンドが新しい内容を表示するでしょう。

$ cat new-note.txt


# うまくいかなくても、大丈夫。もう少し練習してから
# もう一回やってみましょう。

2.5.4. picoGym の問題に挑戦！
新しく習得したあなたのシェルの技術で、picoGymの問題を解いてみましょう：
https://play.picoctf.org/practice/challenge/189

2.6.結論
挑戦3の克服についてはまだ触れていないことにお気づきでしょうか。気になる方は、このチートシートで説明されている<code>man</code>コマンドを調べてみてください。
ググることはシェルで問題を解決するためのコマンドを学ぶのに役立ちますし、この章の最初にリンクした「Explain Shell」のウェブサイトも役立ちます、
